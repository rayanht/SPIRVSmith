name: Build, Test and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: spirvsmith
  GAR_LOCATION: us-west1
  GCE_ZONE: us-west1-a
  DEPLOYMENT_NAME: spirvsmith-primary
  REPOSITORY: spirvsmith-docker-images
  IMAGE: spirvsmith-primary

jobs:
  terraform:
    name: "Infra"
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Format
        working-directory: ./infra
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./infra
        run: terraform apply -auto-approve

  build:
    name: "Build & Test"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        poetry-version: [1.0, 1.1.13]
        os: [ubuntu-18.04, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install dependencies
        run: |
          poetry install
      - name: Test with pytest
        run: |
          poetry run python -m pytest
      - name: Generate the coverage report
        run: |
          poetry run coverage run -m pytest
          poetry run coverage xml -o coverage.xml

      - name: Publish code coverage to code climate
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: poetry run coverage report

  license-scan:
    name: "License Scan"
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3
      - name: "Run FOSSA Scan"
        uses: fossas/fossa-action@v1.1.0
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: "Run FOSSA Test"
        uses: fossas/fossa-action@v1.1.0
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true

  deploy:
    name: "Deploy"
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [build, terraform]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Compute short GitHub SHA
        id: vars
        run: echo "::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)"

      - name: Check outputs
        run: echo ${{ steps.vars.outputs.SHA_SHORT }}

      # Get the GKE credentials so we can deploy to the cluster
      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Set up Docker credentials
        run: gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      # Build the Docker image
      - name: Build Docker Image
        run: |-
          docker build \
            --tag  "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.vars.outputs.SHA_SHORT }}" \
            --build-arg GITHUB_SHA="${{ steps.vars.outputs.SHA_SHORT }}" \
            --build-arg GITHUB_REF="${{ github.ref }}" \
            .

      - name: Publish to GCR
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.vars.outputs.SHA_SHORT }}"

      - name: Deploy to GCE
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          GOOGLE_CREDENTIALS:  ${{ secrets.GCP_CREDENTIALS }}
        run: |-
          gcloud compute instances update-container "${{ env.DEPLOYMENT_NAME }}" --zone "${{ env.GCE_ZONE }}" --container-env DD_API_KEY=$DD_API_KEY GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS --container-image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.vars.outputs.SHA_SHORT }}"
